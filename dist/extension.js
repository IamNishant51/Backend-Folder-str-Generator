(()=>{"use strict";var e={3:e=>{e.exports=require("path")},265:function(e,n,r){var o,s=this&&this.__createBinding||(Object.create?function(e,n,r,o){void 0===o&&(o=r);var s=Object.getOwnPropertyDescriptor(n,r);s&&!("get"in s?!n.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return n[r]}}),Object.defineProperty(e,o,s)}:function(e,n,r,o){void 0===o&&(o=r),e[o]=n[r]}),t=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var n=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[n.length]=r);return n},o(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r=o(e),a=0;a<r.length;a++)"default"!==r[a]&&s(n,e,r[a]);return t(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){let n=c.commands.registerCommand("expressjet.createBoilerplate",async()=>{const e=c.workspace.workspaceFolders;if(!e||0===e.length)return void c.window.showErrorMessage("No folder is open in the current VS Code window.");const n=e[0].uri.fsPath,r=await c.window.showInputBox({prompt:'Enter your project name (e.g., "my-api-backend")',placeHolder:"my-express-app",value:l.basename(n)});if(!r)return void c.window.showInformationMessage("Boilerplate generation cancelled. Project name is required.");const o=await c.window.showQuickPick(["npm","yarn"],{placeHolder:"Choose your preferred package manager",canPickMany:!1});if(!o)return void c.window.showInformationMessage("Boilerplate generation cancelled. Package manager choice is required.");const s=await c.window.showQuickPick(["CommonJS (require/module.exports)","ES Modules (import/export)"],{placeHolder:"Choose your module system",canPickMany:!1});if(!s)return void c.window.showInformationMessage("Boilerplate generation cancelled. Module system choice is required.");const t="ES Modules (import/export)"===s,a=t?"mjs":"js",p=t?'"type": "module",':"",m=l.join(n,"src"),u=["src","src/config","src/controllers","src/models","src/routes","src/middlewares","src/utils"];try{u.forEach(e=>i.mkdirSync(l.join(n,e),{recursive:!0})),(()=>{const e=t?`\nimport express from 'express';\nimport dotenv from 'dotenv';\nimport connectDB from './config/db.${a}';\nimport exampleRoute from './routes/example.route.${a}'; // Example route\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\n// Example route usage\napp.use('/api/example', exampleRoute);\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nconnectDB();\n\napp.listen(PORT, () => {\n    console.log(\`Server is running on port \${PORT}\`);\n});\n`.trim():"\nconst express = require('express');\nconst dotenv = require('dotenv');\nconst connectDB = require('./config/db');\nconst exampleRoute = require('./routes/example.route'); // Example route\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\n// Example route usage\napp.use('/api/example', exampleRoute);\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nconnectDB();\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n".trim();i.writeFileSync(l.join(m,`app.${a}`),e);const s=t?"\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nexport default connectDB;\n".trim():"\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nmodule.exports = connectDB;\n".trim();i.writeFileSync(l.join(m,"config",`db.${a}`),s);const c=`PORT=5000\nMONGO_URI=mongodb://localhost:27017/${r.toLowerCase().replace(/\s/g,"-")}-db`;i.writeFileSync(l.join(n,".env"),c),i.writeFileSync(l.join(n,".gitignore"),"node_modules/\n.env\n.vscode/");const u=`\n# ${r} - Express + MongoDB Boilerplate\n\n## 🔧 Installation\n\n\`\`\`bash\n${o} install\n\`\`\`\n\n## 🚀 Run the server\n\n\`\`\`bash\n${"npm"===o?"npm run dev":"yarn dev"}\n\`\`\`\n\n## 📁 Folder Structure\n\n- \`src/config\`: Database configuration\n- \`src/controllers\`: Contains business logic for routes\n- \`src/models\`: Mongoose schemas and models\n- \`src/routes\`: API routes definitions\n- \`src/middlewares\`: Custom Express middlewares\n- \`src/utils\`: Helper functions, error handling, etc.\n\n---\n\n## 💡 Quick Start Example\n\nThis boilerplate includes a basic example for a "User" resource.\n\n### Model: \`src/models/User.model.${a}\`\n\n\`\`\`${t?"js":"javascript"}\n${t?"import mongoose from 'mongoose';":"const mongoose = require('mongoose');"}\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\n${t?"export default mongoose.model('User', userSchema);":"module.exports = mongoose.model('User', userSchema);"}\n\`\`\`\n\n### Controller: \`src/controllers/example.controller.${a}\`\n\n\`\`\`${t?"js":"javascript"}\n${t?`import User from '../models/User.model.${a}';`:"const User = require('../models/User.model');"}\n\n${t?"export const getAllUsers = async (req, res) => {":"exports.getAllUsers = async (req, res) => {"}\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\n${t?"export const createUser = async (req, res) => {":"exports.createUser = async (req, res) => {"}\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\`\`\`\n\n### Route: \`src/routes/example.route.${a}\`\n\n\`\`\`${t?"js":"javascript"}\n${t?`import express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${a}';`:"const express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');"}\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\n${t?"export default router;":"module.exports = router;"}\n\`\`\`\n`.trim();i.writeFileSync(l.join(n,"README.md"),u);const d=`\n{\n    "name": "${r.toLowerCase().replace(/\s/g,"-")}",\n    "version": "1.0.0",\n    "description": "A modern Express.js and MongoDB backend boilerplate.",\n    ${p}\n    "main": "src/app.${a}",\n    "scripts": {\n        "start": "node src/app.${a}",\n        "dev": "nodemon src/app.${a}"\n    },\n    "keywords": [\n        "express",\n        "mongodb",\n        "boilerplate",\n        "api"\n    ],\n    "author": "Nishant — The Web Architect",\n    "license": "ISC",\n    "dependencies": {\n        "dotenv": "^16.0.3",\n        "express": "^4.18.2",\n        "mongoose": "^7.6.0"\n    },\n    "devDependencies": {\n        "nodemon": "^3.0.1"\n    }\n}\n`.trim();i.writeFileSync(l.join(n,"package.json"),d);const g=t?"\nimport mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\nexport default mongoose.model('User', userSchema);\n".trim():"\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n".trim();i.writeFileSync(l.join(m,"models",`User.model.${a}`),g);const w=t?`\nimport User from '../models/User.model.${a}';\n\nexport const getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexport const createUser = async (req, res) => {\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n`.trim():"\nconst User = require('../models/User.model');\n\nexports.getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexports.createUser = async (req, res) => {\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n".trim();i.writeFileSync(l.join(m,"controllers",`example.controller.${a}`),w);const x=t?`\nimport express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${a}';\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\nexport default router;\n`.trim():"\nconst express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\nmodule.exports = router;\n".trim();i.writeFileSync(l.join(m,"routes",`example.route.${a}`),x)})(),c.window.showInformationMessage(`✅ Express backend boilerplate for "${r}" generated!`);const e=c.window.createTerminal(`Install Dependencies (${o})`);e.show(),e.sendText(`${o} install`),e.sendText("exit"),c.window.showInformationMessage(`Dependencies are being installed with ${o}.`);const s="Open README.md",d="Show in Explorer";c.window.showInformationMessage("Your Express.js backend is ready!",s,d).then(e=>{e===s?c.workspace.openTextDocument(l.join(n,"README.md")).then(e=>{c.window.showTextDocument(e)}):e===d&&c.commands.executeCommand("revealFileInOS",c.Uri.file(n))})}catch(e){c.window.showErrorMessage(`❌ Error creating boilerplate: ${e.message}`)}});e.subscriptions.push(n)},n.deactivate=function(){};const c=a(r(398)),i=a(r(383)),l=a(r(3))},383:e=>{e.exports=require("fs")},398:e=>{e.exports=require("vscode")}},n={},r=function r(o){var s=n[o];if(void 0!==s)return s.exports;var t=n[o]={exports:{}};return e[o].call(t.exports,t,t.exports,r),t.exports}(265);module.exports=r})();
//# sourceMappingURL=extension.js.map