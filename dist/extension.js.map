{"version":3,"file":"extension.js","mappings":"gCAAAA,EAAOC,QAAUC,QAAQ,O,m2BCIzB,oBAAyBC,GACvB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,+BAAgCC,UAC/E,MAAMC,EAAmBJ,EAAOK,UAAUD,iBAE1C,IAAKA,GAAgD,IAA5BA,EAAiBE,OAExC,YADAN,EAAOO,OAAOC,iBAAiB,oDAIjC,MAAMC,EAAWL,EAAiB,GAAGM,IAAIC,OACnCC,EAAUC,EAAKC,KAAKL,EAAU,OAE9BM,EAAU,CACd,MACA,aACA,kBACA,aACA,aACA,mBA6GF,IAzGEA,EAAQC,QAAQC,GAAUC,EAAGC,UAAUN,EAAKC,KAAKL,EAAUQ,GAAS,CAAEG,WAAW,KAG/D,MAClB,MAAMC,EAAe,uZAqBzBC,OAEIJ,EAAGK,cAAcV,EAAKC,KAAKF,EAAS,UAAWS,GAE/C,MAAMG,EAAc,kUAexBF,OAEIJ,EAAGK,cAAcV,EAAKC,KAAKF,EAAS,SAAU,SAAUY,GAGxDN,EAAGK,cAAcV,EAAKC,KAAKL,EAAU,QADlB,+DAInBS,EAAGK,cAAcV,EAAKC,KAAKL,EAAU,cADZ,uBAGzB,MAAMgB,EAAgB,0ZAwB1BH,OAEIJ,EAAGK,cAAcV,EAAKC,KAAKL,EAAU,aAAcgB,GAEnD,MAAMC,EAAqB,iVAkB/BJ,OAEIJ,EAAGK,cAAcV,EAAKC,KAAKL,EAAU,gBAAiBiB,IAKtDC,GACA3B,EAAOO,OAAOqB,uBAAuB,6DACvC,CAAE,MAAOC,GACP7B,EAAOO,OAAOC,iBAAiB,iCAAiCqB,IAClE,IAGF/B,EAAQgC,cAAcC,KAAKhC,EAC7B,EAEA,wBAA8B,EA/I9B,kBACA,YACA,S,UCFAJ,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,S,GCCrBmC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaxC,QAGrB,IAAID,EAASqC,EAAyBG,GAAY,CAGjDvC,QAAS,CAAC,GAOX,OAHA0C,EAAoBH,GAAUI,KAAK5C,EAAOC,QAASD,EAAQA,EAAOC,QAASsC,GAGpEvC,EAAOC,OACf,CCnB0BsC,CAAoB,K","sources":["webpack://express-jet/external commonjs \"path\"","webpack://express-jet/./src/extension.ts","webpack://express-jet/external commonjs \"fs\"","webpack://express-jet/external commonjs \"vscode\"","webpack://express-jet/webpack/bootstrap","webpack://express-jet/webpack/startup"],"sourcesContent":["module.exports = require(\"path\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand('expressjet.createBoilerplate', async () => {\n    const workspaceFolders = vscode.workspace.workspaceFolders;\n\n    if (!workspaceFolders || workspaceFolders.length === 0) {\n      vscode.window.showErrorMessage('No folder is open in the current VS Code window.');\n      return;\n    }\n\n    const rootPath = workspaceFolders[0].uri.fsPath;\n    const srcPath = path.join(rootPath, 'src');\n\n    const folders = [\n      'src',\n      'src/config',\n      'src/controllers',\n      'src/models',\n      'src/routes',\n      'src/middlewares',\n    ];\n\n    const createFolders = () => {\n      folders.forEach(folder => fs.mkdirSync(path.join(rootPath, folder), { recursive: true }));\n    };\n\n    const createFiles = () => {\n      const appJsContent = `\nconst express = require('express');\nconst dotenv = require('dotenv');\nconst connectDB = require('./config/db');\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('API is running...');\n});\n\nconnectDB();\n\napp.listen(PORT, () => {\n  console.log(\\`Server is running on port \\${PORT}\\`);\n});\n`.trim();\n\n      fs.writeFileSync(path.join(srcPath, 'app.js'), appJsContent);\n\n      const dbJsContent = `\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI);\n    console.log('MongoDB Connected');\n  } catch (err) {\n    console.error(err.message);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n`.trim();\n\n      fs.writeFileSync(path.join(srcPath, 'config', 'db.js'), dbJsContent);\n\n      const envContent = `PORT=5000\\nMONGO_URI=mongodb://localhost:27017/your-db-name`;\n      fs.writeFileSync(path.join(rootPath, '.env'), envContent);\n\n      const gitignoreContent = `node_modules/\\n.env`;\n      fs.writeFileSync(path.join(rootPath, '.gitignore'), gitignoreContent);\n\n      const readmeContent = `\n# Express + MongoDB Boilerplate\n\n## üîß Installation\n\n\\`\\`\\`bash\nnpm install express mongoose dotenv\n\\`\\`\\`\n\n## üöÄ Run the server\n\n\\`\\`\\`bash\nnode src/app.js\n# or with nodemon\nnodemon src/app.js\n\\`\\`\\`\n\n## üìÅ Folder Structure\n\n- \\`src/config\\`: DB config\n- \\`src/controllers\\`: Controllers (add your logic)\n- \\`src/models\\`: Mongoose models\n- \\`src/routes\\`: API routes\n- \\`src/middlewares\\`: Middlewares\n`.trim();\n\n      fs.writeFileSync(path.join(rootPath, 'README.md'), readmeContent);\n\n      const packageJsonContent = `\n{\n  \"name\": \"express-backend\",\n  \"version\": \"1.0.0\",\n  \"main\": \"src/app.js\",\n  \"scripts\": {\n    \"start\": \"node src/app.js\",\n    \"dev\": \"nodemon src/app.js\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^16.0.3\",\n    \"express\": \"^4.18.2\",\n    \"mongoose\": \"^7.6.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.1\"\n  }\n}\n`.trim();\n\n      fs.writeFileSync(path.join(rootPath, 'package.json'), packageJsonContent);\n    };\n\n    try {\n      createFolders();\n      createFiles();\n      vscode.window.showInformationMessage('‚úÖ Express backend boilerplate generated in current folder!');\n    } catch (err) {\n      vscode.window.showErrorMessage(`‚ùå Error creating boilerplate: ${err}`);\n    }\n  });\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n","module.exports = require(\"fs\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","disposable","vscode","commands","registerCommand","async","workspaceFolders","workspace","length","window","showErrorMessage","rootPath","uri","fsPath","srcPath","path","join","folders","forEach","folder","fs","mkdirSync","recursive","appJsContent","trim","writeFileSync","dbJsContent","readmeContent","packageJsonContent","createFiles","showInformationMessage","err","subscriptions","push","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}