{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://express-jet/external commonjs \"path\"","webpack://express-jet/./src/extension.ts","webpack://express-jet/external commonjs \"fs\"","webpack://express-jet/external commonjs \"vscode\"","webpack://express-jet/webpack/bootstrap","webpack://express-jet/webpack/startup"],"sourcesContent":["module.exports = require(\"path\");","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('expressjet.createBoilerplate', async () => {\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n\n        if (!workspaceFolders || workspaceFolders.length === 0) {\n            vscode.window.showErrorMessage('No folder is open in the current VS Code window.');\n            return;\n        }\n\n        const rootPath = workspaceFolders[0].uri.fsPath;\n\n        // 1. Prompt for Project Name\n        const projectName = await vscode.window.showInputBox({\n            prompt: 'Enter your project name (e.g., \"my-api-backend\")',\n            placeHolder: 'my-express-app',\n            value: path.basename(rootPath) // Suggest current folder name as default\n        });\n\n        if (!projectName) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Project name is required.');\n            return;\n        }\n\n        // 2. Prompt for Package Manager\n        const packageManager = await vscode.window.showQuickPick(['npm', 'yarn'], {\n            placeHolder: 'Choose your preferred package manager',\n            canPickMany: false\n        });\n\n        if (!packageManager) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Package manager choice is required.');\n            return;\n        }\n\n        // 3. Prompt for ES Modules vs CommonJS\n        const moduleSystem = await vscode.window.showQuickPick(['CommonJS (require/module.exports)', 'ES Modules (import/export)'], {\n            placeHolder: 'Choose your module system',\n            canPickMany: false\n        });\n\n        if (!moduleSystem) {\n            vscode.window.showInformationMessage('Boilerplate generation cancelled. Module system choice is required.');\n            return;\n        }\n\n        const useESModules = moduleSystem === 'ES Modules (import/export)';\n        const fileExtension = useESModules ? 'mjs' : 'js';\n        const packageJsonType = useESModules ? '\"type\": \"module\",' : '';\n\n        const srcPath = path.join(rootPath, 'src');\n\n        const folders = [\n            'src',\n            'src/config',\n            'src/controllers',\n            'src/models',\n            'src/routes',\n            'src/middlewares',\n            'src/utils' // Added for utilities like error handling or helper functions\n        ];\n\n        const createFolders = () => {\n            folders.forEach(folder => fs.mkdirSync(path.join(rootPath, folder), { recursive: true }));\n        };\n\n        const createFiles = () => {\n            const appJsContent = useESModules ? `\nimport express from 'express';\nimport dotenv from 'dotenv';\nimport connectDB from './config/db.${fileExtension}';\nimport exampleRoute from './routes/example.route.${fileExtension}'; // Example route\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\n// Example route usage\napp.use('/api/example', exampleRoute);\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nconnectDB();\n\napp.listen(PORT, () => {\n    console.log(\\`Server is running on port \\${PORT}\\`);\n});\n`.trim() : `\nconst express = require('express');\nconst dotenv = require('dotenv');\nconst connectDB = require('./config/db');\nconst exampleRoute = require('./routes/example.route'); // Example route\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\n// Example route usage\napp.use('/api/example', exampleRoute);\n\napp.get('/', (req, res) => {\n    res.send('API is running...');\n});\n\nconnectDB();\n\napp.listen(PORT, () => {\n    console.log(\\`Server is running on port \\${PORT}\\`);\n});\n`.trim();\n\n            fs.writeFileSync(path.join(srcPath, `app.${fileExtension}`), appJsContent);\n\n            const dbJsContent = useESModules ? `\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nexport default connectDB;\n`.trim() : `\nconst mongoose = require('mongoose');\nrequire('dotenv').config();\n\nconst connectDB = async () => {\n    try {\n        await mongoose.connect(process.env.MONGO_URI);\n        console.log('MongoDB Connected');\n    } catch (err) {\n        console.error(err.message);\n        process.exit(1);\n    }\n};\n\nmodule.exports = connectDB;\n`.trim();\n\n            fs.writeFileSync(path.join(srcPath, 'config', `db.${fileExtension}`), dbJsContent);\n\n            const envContent = `PORT=5000\\nMONGO_URI=mongodb://localhost:27017/${projectName.toLowerCase().replace(/\\s/g, '-')}-db`;\n            fs.writeFileSync(path.join(rootPath, '.env'), envContent);\n\n            const gitignoreContent = `node_modules/\\n.env\\n.vscode/`; // Added .vscode for good measure\n            fs.writeFileSync(path.join(rootPath, '.gitignore'), gitignoreContent);\n\n            const readmeContent = `\n# ${projectName} - Express + MongoDB Boilerplate\n\n## üîß Installation\n\n\\`\\`\\`bash\n${packageManager} install\n\\`\\`\\`\n\n## üöÄ Run the server\n\n\\`\\`\\`bash\n${packageManager === 'npm' ? 'npm run dev' : 'yarn dev'}\n\\`\\`\\`\n\n## üìÅ Folder Structure\n\n- \\`src/config\\`: Database configuration\n- \\`src/controllers\\`: Contains business logic for routes\n- \\`src/models\\`: Mongoose schemas and models\n- \\`src/routes\\`: API routes definitions\n- \\`src/middlewares\\`: Custom Express middlewares\n- \\`src/utils\\`: Helper functions, error handling, etc.\n\n---\n\n## üí° Quick Start Example\n\nThis boilerplate includes a basic example for a \"User\" resource.\n\n### Model: \\`src/models/User.model.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import mongoose from 'mongoose';` : `const mongoose = require('mongoose');`}\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\n${useESModules ? `export default mongoose.model('User', userSchema);` : `module.exports = mongoose.model('User', userSchema);`}\n\\`\\`\\`\n\n### Controller: \\`src/controllers/example.controller.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import User from '../models/User.model.${fileExtension}';` : `const User = require('../models/User.model');`}\n\n${useESModules ? `export const getAllUsers = async (req, res) => {` : `exports.getAllUsers = async (req, res) => {`}\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\n${useESModules ? `export const createUser = async (req, res) => {` : `exports.createUser = async (req, res) => {`}\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\\`\\`\\`\n\n### Route: \\`src/routes/example.route.${fileExtension}\\`\n\n\\`\\`\\`${useESModules ? 'js' : 'javascript'}\n${useESModules ? `import express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${fileExtension}';` : `const express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');`}\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\n${useESModules ? `export default router;` : `module.exports = router;`}\n\\`\\`\\`\n`.trim();\n\n            fs.writeFileSync(path.join(rootPath, 'README.md'), readmeContent);\n\n            const packageJsonContent = `\n{\n    \"name\": \"${projectName.toLowerCase().replace(/\\s/g, '-')}\",\n    \"version\": \"1.0.0\",\n    \"description\": \"A modern Express.js and MongoDB backend boilerplate.\",\n    ${packageJsonType}\n    \"main\": \"src/app.${fileExtension}\",\n    \"scripts\": {\n        \"start\": \"node src/app.${fileExtension}\",\n        \"dev\": \"nodemon src/app.${fileExtension}\"\n    },\n    \"keywords\": [\n        \"express\",\n        \"mongodb\",\n        \"boilerplate\",\n        \"api\"\n    ],\n    \"author\": \"Nishant ‚Äî The Web Architect\",\n    \"license\": \"ISC\",\n    \"dependencies\": {\n        \"dotenv\": \"^16.0.3\",\n        \"express\": \"^4.18.2\",\n        \"mongoose\": \"^7.6.0\"\n    },\n    \"devDependencies\": {\n        \"nodemon\": \"^3.0.1\"\n    }\n}\n`.trim();\n\n            fs.writeFileSync(path.join(rootPath, 'package.json'), packageJsonContent);\n\n            // Create example model, controller, route\n            const exampleModelContent = useESModules ? `\nimport mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\nexport default mongoose.model('User', userSchema);\n`.trim() : `\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n    name: {\n        type: String,\n        required: true,\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n    },\n    createdAt: {\n        type: Date,\n        default: Date.now,\n    },\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n`.trim();\n\n            fs.writeFileSync(path.join(srcPath, 'models', `User.model.${fileExtension}`), exampleModelContent);\n\n            const exampleControllerContent = useESModules ? `\nimport User from '../models/User.model.${fileExtension}';\n\nexport const getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexport const createUser = async (req, res) => {\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n`.trim() : `\nconst User = require('../models/User.model');\n\nexports.getAllUsers = async (req, res) => {\n    try {\n        const users = await User.find();\n        res.json(users);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n\nexports.createUser = async (req, res) => {\n    const { name, email } = req.body;\n    try {\n        const newUser = new User({ name, email });\n        await newUser.save();\n        res.status(201).json(newUser);\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: 'Server Error' });\n    }\n};\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'controllers', `example.controller.${fileExtension}`), exampleControllerContent);\n\n            const exampleRouteContent = useESModules ? `\nimport express from 'express';\nimport { getAllUsers, createUser } from '../controllers/example.controller.${fileExtension}';\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\nexport default router;\n`.trim() : `\nconst express = require('express');\nconst { getAllUsers, createUser } = require('../controllers/example.controller');\n\nconst router = express.Router();\n\nrouter.get('/', getAllUsers);\nrouter.post('/', createUser);\n\nmodule.exports = router;\n`.trim();\n            fs.writeFileSync(path.join(srcPath, 'routes', `example.route.${fileExtension}`), exampleRouteContent);\n        };\n\n        try {\n            createFolders();\n            createFiles();\n            vscode.window.showInformationMessage(`‚úÖ Express backend boilerplate for \"${projectName}\" generated!`);\n\n            // Install dependencies\n            const terminal = vscode.window.createTerminal(`Install Dependencies (${packageManager})`);\n            terminal.show();\n            terminal.sendText(`${packageManager} install`);\n            terminal.sendText(`exit`); // Close terminal after command\n\n            vscode.window.showInformationMessage(`Dependencies are being installed with ${packageManager}.`);\n\n            // Suggest next steps\n            const openReadme = 'Open README.md';\n            const showExplorer = 'Show in Explorer';\n            vscode.window.showInformationMessage(\n                `Your Express.js backend is ready!`,\n                openReadme,\n                showExplorer\n            ).then(selection => {\n                if (selection === openReadme) {\n                    vscode.workspace.openTextDocument(path.join(rootPath, 'README.md')).then(doc => {\n                        vscode.window.showTextDocument(doc);\n                    });\n                } else if (selection === showExplorer) {\n                    vscode.commands.executeCommand('revealFileInOS', vscode.Uri.file(rootPath));\n                }\n            });\n\n\n        } catch (err: any) { // Type 'any' for error to access message property\n            vscode.window.showErrorMessage(`‚ùå Error creating boilerplate: ${err.message}`);\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() { }","module.exports = require(\"fs\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["module","exports","require","context","disposable","vscode","commands","registerCommand","async","workspaceFolders","workspace","length","window","showErrorMessage","rootPath","uri","fsPath","projectName","showInputBox","prompt","placeHolder","value","path","basename","showInformationMessage","packageManager","showQuickPick","canPickMany","moduleSystem","useESModules","fileExtension","packageJsonType","srcPath","join","folders","forEach","folder","fs","mkdirSync","recursive","appJsContent","trim","writeFileSync","dbJsContent","envContent","toLowerCase","replace","readmeContent","packageJsonContent","exampleModelContent","exampleControllerContent","exampleRouteContent","createFiles","terminal","createTerminal","show","sendText","openReadme","showExplorer","then","selection","openTextDocument","doc","showTextDocument","executeCommand","Uri","file","err","message","subscriptions","push","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}